/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |   BKSP    |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |    '      |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT(RET) |
//                         | ALT | LWR | SPC | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W        &kp F        &kp P        &kp B   &kp J &kp L         &kp U            &kp Y          &kp SEMI &kp BSPC
   &kp LCTRL &kp A &mt LALT R &mt LCTRL S &mt LSHIFT T &kp G   &kp M &mt LSHIFT N  &mt LCTRL E     &mt LALT I   &kp O    &kp SQT
   &kp LSHFT &kp Z &kp X        &kp C        &kp D        &kp V   &kp K &kp H         &kp COMMA        &kp DOT        &kp FSLH &mt LGUI RET
                        &lt 2 SPACE  &kp SPACE &lt 1 SPACE
                        >;
                };

                sym_layer {
// ----------------------------------------------------------------------------------
// |    |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |    DEL    |
// |    |  _  |  +  |  {  |  }  | "|" |   | LFT | DWN |  UP | RGT |  `  |     ~     |
// |    | ESC | GUI | ALT | CAPS|  "  |   | HOME| END | PGUP| PGDN| PRSC| SHFT(RET) |
//                       |     |     | RET | ADJ |     |
                        bindings = <
      &kp TAB &kp GRAVE &kp CARET &kp AT    &kp DLLR  &kp TILDE   &kp AMPS &kp EXCL  &kp PIPE     &kp UNDER   &kp HASH &kp BSPC
      &kp GRAVE &kp FSLH  &kp LBKT  &kp LBRC  &kp LPAR  &kp EQUAL   &kp STAR &kp RPAR  &kp RBRC     &kp RBKT    &kp BSLH &kp GRAVE
      &kp LSHFT &kp ESC &kp QMARK &kp PLUS  &kp PRCNT &trans      &trans   &trans    &kp MINUS    &trans      &kp LGUI &kp GRAVE
                                 &mo 3      &kp RET       &trans        
                        >;
                };

                num_layer {
// -----------------------------------------------------------------------------------------
// |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
// |    |  -  |  =  |  [  |  ]  |  \  |   | F1  | F2  | F3  | F4  | F5  | F6  |
// |    | ESC | GUI | ALT | CAPS|  "  |   | F7  | F8  | F9  | F10 | F11 | F12 |
//                       |     | ADJ | BKSP |    |     |
                        bindings = <
      &kp TAB    &trans &kp LG(N1)   &kp LG(N2)     &kp LG(N3)    &trans      &kp PLUS  &kp N7    &kp N8     &kp N9   &kp FSLH &kp BSPC
      &trans     &trans &kp LG(N4)   &kp LG(N5)     &kp LG(N6)    &trans      &kp N0    &kp N4    &kp N5     &kp N6   &kp DOT  &trans
      &kp LSHFT  &trans &kp LG(N7)   &kp LG(N8)     &kp LG(N9)    &trans      &kp MINUS &kp N1    &kp N2     &kp N3   &kp STAR &trans
                                     &trans         &kp RET         &mo 3   
                        >;
                };

                nav_layer {
// -----------------------------------------------------------------------------------------
// |    |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL |
// |    |  -  |  =  |  [  |  ]  |  \  |   | F1  | F2  | F3  | F4  | F5  | F6  |
// |    | ESC | GUI | ALT | CAPS|  "  |   | F7  | F8  | F9  | F10 | F11 | F12 |
//                       |     | ADJ | BKSP |    |     |
                        bindings = <
   &kp TAB    &kp CAPS       &kp C_VOL_UP &kp C_MUTE   &kp C_VOL_DN &kp LG(C)      &kp N6   &kp N7   &kp UP    &kp UP     &kp N0    &kp BSPC
   &bt BT_CLR &bt BT_SEL 0   &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &kp LG(V)      &kp HOME &kp LEFT &kp DOWN  &kp RIGHT  &kp END   &kp END
   &kp LSHFT  &kp LG(Z)      &kp LG(S)    &kp LG(A)    &kp LG(F)    &kp LG(X)      &bootloader   &out OUT_BLE   &trans    &trans     &trans    &trans
                                &trans      &trans       &trans     
                        >;
                };
        };
};